The first function, makeVector creates a special "vector", which is really a list containing a function to

set the value of the vector
get the value of the vector
set the value of the mean
get the value of the mean
```{r}
makeVector <- function(x = numeric()) {
  m <- NULL
  set <- function(y) {
    x <<- y
    m <<- NULL
  }
  get <- function() x
  setmean <- function(mean) m <<- mean
  getmean <- function() m
  list(set = set, get = get,
       setmean = setmean,
       getmean = getmean)
}

```

The following function calculates the mean of the special "vector" created with the above function. However, it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and skips the computation. Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function.
```{r}
cachemean <- function(x, ...) {
  m <- x$getmean()
  if(!is.null(m)) {
    message("getting cached data")
    return(m)
  }
  data <- x$get()
  m <- mean(data, ...)
  x$setmean(m)
  m
}
```


## Write a short comment describing this function
##The following functions are used to create a special object that stores a matrix and caches its inverse. The first function, makeCacheMatrix creates a special “matrix”, which is really a list containing a function to:

#set the value of the matrix

#get the value of the matrix

#set the value of the inverse

#get the value of the inverse
```{r}
makeCacheMatrix <- function(x = matrix()) {
       inv <- NULL
     set <- function(y){
           x <<- y
           inv <<- NULL
       }
       get <- function() x
       setInverse <- function(solveMatrix) inv <<- solveMatrix
       getInverse <- function() inv
       list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
   }
```


## Write a short comment describing this function
##This function computes the inverse of the special “matrix” returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then cacheSolve should retrieve the inverse from the cache
```{r}
cacheSolve <- function(x, ...) {
       ## Return a matrix that is the inverse of 'x'
       inv <- x$getInverse()
       if(!is.null(inv)){
           message("getting cached data")
           return(inv)
       }
       data <- x$get()
       inv <- solve(data)
       x$setInverse(inv)
       inv      
   }
```

#Solution
#For this assignment, assume that the matrix supplied is always invertible.

#Testing
#Below we call the function with a matrix, compute the inverse, retrieve the inverse from the cache list, change the call matrix to the inverse, compute the inverse on that and return the original function.
```{r}
my_matrix <- makeCacheMatrix(matrix(5:8, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
 my_matrix$getInverse()
```

